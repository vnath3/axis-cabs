---
import Base from '@/layouts/Base.astro';
import LeadForm from '@/components/LeadForm.astro';
import StoryToggleIsland from '@/components/packages/StoryToggleIsland.astro';
import ItineraryDay from '@/components/packages/ItineraryDay.astro';
import { packages, type PackageEntry } from '@/data/packages';
import { formatINR, priceRange } from '@/lib/price';
import { getSupabaseClient } from '@/lib/SupabaseClient';
import JsonLd from '@/components/JsonLd.astro';

export async function getStaticPaths() {
  return packages.map(p => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const entry = packages.find(p => p.slug === slug) as PackageEntry | undefined;
if (!entry) return Astro.redirect('/');

let pricing = entry.pricing;
let reviews = entry.reviews;

// ---- Optional Supabase overlays ----
try {
  if (entry.allowDynamicPricing && import.meta.env.ENABLE_DB_PRICING !== 'false') {
    const supa = getSupabaseClient();
    const { data } = await supa
      .from('package_pricing')
      .select('updated_on,assumptions,disclaimers,bands:package_pricing_band(pax_label,vehicle,price_from,price_to,is_active)')
      .eq('slug', slug)
      .eq('is_published', true)
      .maybeSingle();
    if (data) {
      pricing = {
        updated: data.updated_on,
        assumptions: data.assumptions || [],
        disclaimers: data.disclaimers || [],
        bands: (data.bands || []).filter((b: any) => b.is_active !== false).map((b: any) => ({
          pax: b.pax_label,
          vehicle: b.vehicle,
          from: b.price_from,
          to: b.price_to,
        })),
      };
    }
  }
} catch (err) {
  console.error('pricing fetch', err);
}

try {
  if (entry.reviewsEnabled && import.meta.env.ENABLE_DB_REVIEWS !== 'false') {
    const supa = getSupabaseClient();
    const { data } = await supa
      .from('package_reviews')
      .select('name,rating,text')
      .eq('slug', slug)
      .eq('is_published', true);
    if (data && data.length) reviews = data as any;
  }
} catch (err) {
  console.error('reviews fetch', err);
}

const { low, high } = priceRange(pricing?.bands || []);
const avgRating = reviews.length ? reviews.reduce((s, r) => s + r.rating, 0) / reviews.length : 0;
const whatsappDigits = entry.contact.whatsapp.replace(/\D/g, '');
const waMsg = encodeURIComponent(`Hi Axis Cabs, I'm interested in ${entry.title}. Dates TBD. Pax TBD.`);
const waHref = `https://wa.me/${whatsappDigits}?text=${waMsg}`;

const jsonLd: any = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: entry.title,
  description: entry.summary,
  brand: { '@type': 'Brand', name: 'Axis Cabs' },
};
if (reviews.length) {
  jsonLd.aggregateRating = {
    '@type': 'AggregateRating',
    ratingValue: avgRating.toFixed(1),
    reviewCount: reviews.length,
  };
}
if (pricing?.bands?.length) {
  jsonLd.offers = {
    '@type': 'AggregateOffer',
    priceCurrency: 'INR',
    lowPrice: String(low),
    highPrice: String(high),
  };
}
---
<Base title={`${entry.title} | Axis Cabs`} description={entry.summary} canonical={`/packages/${entry.slug}`} ogImage={entry.hero}>
  <JsonLd />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(jsonLd)} />
  <main class="max-w-6xl mx-auto px-4">
    <section class="relative h-64 md:h-96 mb-8">
      <img src={entry.hero} alt={entry.title} class="absolute inset-0 w-full h-full object-cover" loading="eager" />
      <div class="absolute inset-0 bg-black/50 flex flex-col justify-end p-4 text-white">
        <div class="flex flex-wrap gap-2 mb-2 text-xs">
          <span class="bg-black/30 rounded px-2 py-1">{entry.region}</span>
          <span class="bg-black/30 rounded px-2 py-1">{entry.meta.durationDays} days</span>
          <span class="bg-black/30 rounded px-2 py-1">{entry.tripStyle.join(' \u2022 ')}</span>
        </div>
        <h1 class="text-2xl md:text-4xl font-bold">{entry.title}</h1>
        <p class="text-lg opacity-90">{entry.subtitle}</p>
      </div>
    </section>

    <section class="flex flex-col md:flex-row gap-6 mb-8">
      <div class="md:w-2/3">
        <p>{entry.summary}</p>
      </div>
      <div class="md:w-1/3">
        {reviews.length ? (
          <div class="text-center">
            <p class="text-3xl font-semibold">{avgRating.toFixed(1)}</p>
            <p class="text-sm">
              <a href="#reviews">Read reviews ({reviews.length})</a>
            </p>
          </div>
        ) : (
          <p class="text-center opacity-70">No reviews yet</p>
        )}
      </div>
    </section>

    <section class="grid md:grid-cols-3 gap-4 mb-8">
      {entry.highlights.map(h => (
        <div class="p-4 border rounded">
          <h3 class="font-semibold mb-1">{h.title}</h3>
          <p class="text-sm text-gray-600">{h.detail}</p>
        </div>
      ))}
    </section>

    <section class="mb-8">
      <StoryToggleIsland slug={entry.slug} visual={entry.gallery.map(g => ({ ...g, caption: g.alt }))} narrative={entry.summary} client:load />
    </section>

    <section id="itinerary" class="mb-8">
      <h2 class="text-xl font-bold mb-4">Itinerary overview</h2>
      {entry.itinerary.map(d => <ItineraryDay {...d} />)}
    </section>

    <section id="pricing" class="mb-8">
      <h2 class="text-xl font-bold mb-4">Transparent pricing</h2>
      {pricing ? (
        <>
          <p class="text-sm mb-2">Updated {pricing.updated}</p>
          {pricing.assumptions.length > 0 && (
            <p class="text-sm mb-2">Assumptions: {pricing.assumptions.join(', ')}</p>
          )}
          <div class="grid sm:grid-cols-2 gap-4">
            {pricing.bands.map(b => (
              <div class="p-4 border rounded">
                <p class="font-medium">{b.pax} \u2022 {b.vehicle}</p>
                <p class="mb-2">{formatINR(b.from)} â€“ {formatINR(b.to)}</p>
                <button class="px-3 py-1 border rounded" data-quote>Enquire</button>
              </div>
            ))}
          </div>
          {pricing.disclaimers.length > 0 && (
            <p class="text-xs mt-2">{pricing.disclaimers.join(' ')}</p>
          )}
        </>
      ) : (
        <p class="text-sm">Call for today's price</p>
      )}
    </section>

    {entry.faqs.length > 0 && (
      <section id="faqs" class="mb-8">
        <h2 class="text-xl font-bold mb-4">FAQs</h2>
        {entry.faqs.map(f => (
          <details class="mb-2">
            <summary class="cursor-pointer">{f.q}</summary>
            <div class="pl-4 text-sm text-gray-700">{f.a}</div>
          </details>
        ))}
      </section>
    )}

    <section id="reviews" class="mb-8">
      <h2 class="text-xl font-bold mb-4">Guest reviews</h2>
      {reviews.length ? (
        <div class="grid md:grid-cols-2 gap-4">
          {reviews.map(r => (
            <div class="p-4 border rounded">
              <p class="font-medium">{r.name}</p>
              <p class="text-sm">{r.text}</p>
            </div>
          ))}
        </div>
      ) : (
        <p>No reviews yet</p>
      )}
    </section>

    <section id="lead" class="mb-8 text-center">
      <p class="mb-4 font-semibold">Ready to plan your trip?</p>
      <div class="flex justify-center gap-4">
        <button class="px-4 py-2 bg-orange-600 text-white rounded" data-quote>Send details</button>
        <a href={`tel:${entry.contact.phone}`} class="px-4 py-2 border rounded">Call</a>
        <a href={waHref} class="px-4 py-2 border rounded">WhatsApp</a>
      </div>
    </section>
  </main>
  <LeadForm />
</Base>
