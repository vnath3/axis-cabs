---
export const prerender = false;
import '../../styles/globals.css';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import Base from '@/layouts/Base.astro';
import LeadForm from '@/components/LeadForm.astro';
import StoryToggleIsland from '@/components/packages/StoryToggleIsland.astro';
import ItineraryDay from '@/components/packages/ItineraryDay.astro';
import { packages, type PackageEntry } from '@/data/packages';
import { formatINR, priceRange } from '@/lib/price';
import { getSupabaseClient } from '@/lib/SupabaseClient';
import JsonLd from '@/components/JsonLd.astro';
import FAQ from '@/components/FAQ.astro';
import ReviewsSection from '@/components/ReviewsSection.astro';

export async function getStaticPaths() {
  return packages.map(p => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const entry = packages.find(p => p.slug === slug) as PackageEntry | undefined;
if (!entry) return Astro.redirect('/');

let pricing = entry.pricing;
let reviews = entry.reviews;

// ---- Optional Supabase overlays ----
try {
  if (entry.allowDynamicPricing && import.meta.env.ENABLE_DB_PRICING !== 'false') {
    const supa = getSupabaseClient();
    const { data } = await supa
      .from('package_pricing')
      .select('updated_on,assumptions,disclaimers,bands:package_pricing_band(pax_label,vehicle,price_from,price_to,is_active)')
      .eq('slug', slug)
      .eq('is_published', true)
      .maybeSingle();
    if (data) {
      pricing = {
        updated: data.updated_on,
        assumptions: data.assumptions || [],
        disclaimers: data.disclaimers || [],
        bands: (data.bands || []).filter((b: any) => b.is_active !== false).map((b: any) => ({
          pax: b.pax_label,
          vehicle: b.vehicle,
          from: b.price_from,
          to: b.price_to,
        })),
      };
    }
  }
} catch (err) {
  console.error('pricing fetch', err);
}

try {
  if (entry.reviewsEnabled && import.meta.env.ENABLE_DB_REVIEWS !== 'false') {
    const supa = getSupabaseClient();
    const { data } = await supa
      .from('package_reviews')
      .select('name,rating,text')
      .eq('slug', slug)
      .eq('is_published', true);
    if (data && data.length) reviews = data as any;
  }
} catch (err) {
  console.error('reviews fetch', err);
}

const { low, high } = priceRange(pricing?.bands || []);
const avgRating = reviews.length ? reviews.reduce((s, r) => s + r.rating, 0) / reviews.length : 0;
const whatsappDigits = entry.contact.whatsapp.replace(/\D/g, '');
const waMsg = encodeURIComponent(`Hi Axis Cabs, I'm interested in ${entry.title}. Dates TBD. Pax TBD.`);
const waHref = `https://wa.me/${whatsappDigits}?text=${waMsg}`;

const jsonLd: any = {
  '@context': 'https://schema.org',
  '@type': 'Product',
  name: entry.title,
  description: entry.summary,
  brand: { '@type': 'Brand', name: 'Axis Cabs' },
};
if (reviews.length) {
  jsonLd.aggregateRating = {
    '@type': 'AggregateRating',
    ratingValue: avgRating.toFixed(1),
    reviewCount: reviews.length,
  };
}
if (pricing?.bands?.length) {
  jsonLd.offers = {
    '@type': 'AggregateOffer',
    priceCurrency: 'INR',
    lowPrice: String(low),
    highPrice: String(high),
  };
}
---
<Base title={`${entry.title} | Axis Cabs`} description={entry.summary} canonical={`/packages/${entry.slug}`} ogImage={entry.hero}>
  <JsonLd />
  <script type="application/ld+json" is:inline set:html={JSON.stringify(jsonLd)} />
  <Header />
  <main class="ac-pkg max-w-6xl mx-auto px-4">
    <section class="relative h-64 md:h-96 mb-8">
      <img src={entry.hero} alt={entry.title} class="absolute inset-0 w-full h-full object-cover" loading="eager" />
      <div class="absolute inset-0 bg-black/50 flex flex-col justify-end p-4 text-white pkg-hero">
        <div class="flex flex-wrap gap-2 mb-2 text-xs">
          <span class="bg-black/30 rounded px-2 py-1">{entry.region}</span>
          <span class="bg-black/30 rounded px-2 py-1">{entry.meta.durationDays} days</span>
          <span class="bg-black/30 rounded px-2 py-1">{entry.tripStyle.join(' \u2022 ')}</span>
        </div>
        <h1 class="text-2xl md:text-4xl font-bold">{entry.title}</h1>
        <p class="text-lg opacity-90">{entry.subtitle}</p>
      </div>
    </section>

    <section class="flex flex-col md:flex-row gap-6 mb-8">
      <div class="md:w-2/3">
        <p>{entry.summary}</p>
      </div>
      <div class="md:w-1/3">
        {reviews.length ? (
          <div class="text-center">
            <p class="text-3xl font-semibold">{avgRating.toFixed(1)}</p>
            <div class="mt-1 flex justify-center gap-1" aria-label={`${avgRating.toFixed(1)} out of 5`}>
              {Array.from({ length: 5 }).map((_, i) => (
                <svg viewBox="0 0 20 20" class={`h-4 w-4 ${i < Math.round(avgRating) ? 'fill-amber-400' : 'fill-slate-200'}`} aria-hidden="true">
                  <path d="M10 15.27 16.18 19l-1.64-7.03L20 7.24l-7.19-.61L10 0 7.19 6.63 0 7.24l5.46 4.73L3.82 19z"/>
                </svg>
              ))}
            </div>
            <p class="text-sm mt-1">
              <a href="#reviews">Read reviews ({reviews.length})</a>
            </p>
          </div>
        ) : (
          <p class="text-center opacity-70">No reviews yet</p>
        )}
      </div>
    </section>

    <section id="highlights" class="mb-8">
      <h2 class="text-xl font-bold mb-4">Trip highlights</h2>
      <div class="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
        {entry.highlights.map((h) => (
          <div class="card p-5 transition shadow-sm hover:shadow-md ring-1 ring-black/5 hover:ring-black/10">
            <div class="flex items-start gap-3">
              <div class="h-10 w-10 shrink-0 rounded-full bg-orange-50 flex items-center justify-center text-orange-600">
                {(() => {
                  const t = h.title.toLowerCase();
                  // Forts
                  if (t.includes('fort') || t.includes('daulatabad')) {
                    return (
                      <svg viewBox="0 0 24 24" class="h-5 w-5" aria-hidden="true">
                        <path fill="currentColor" d="M3 6h3l2-2 2 2h4l2-2 2 2h3v14H3V6zm2 4h14v8H5v-8zm2 2v4h3v-4H7zm7 0v4h3v-4h-3z"/>
                      </svg>
                    );
                  }
                  // Temples / Kailasa (rock-cut)
                  if (t.includes('kailasa') || t.includes('temple')) {
                    return (
                      <svg viewBox="0 0 24 24" class="h-5 w-5" aria-hidden="true">
                        <path fill="currentColor" d="M12 3l4 4h3v3h-2v9H7v-9H5V7h3l4-4zm-3 9h2v6H9v-6zm4 0h2v6h-2v-6z"/>
                      </svg>
                    );
                  }
                  // Murals / Art / Paintings (Ajanta)
                  if (t.includes('mural') || t.includes('painting') || t.includes('art') || t.includes('ajanta')) {
                    return (
                      <svg viewBox="0 0 24 24" class="h-5 w-5" aria-hidden="true">
                        <path fill="currentColor" d="M12 3C7.03 3 3 7.03 3 12c0 2.76 2.24 5 5 5 .55 0 1-.45 1-1 0-.34-.17-.64-.43-.82C7.61 14.51 7 13.32 7 12c0-2.76 2.24-5 5-5 2.21 0 4 1.79 4 4 0 .7-.19 1.36-.52 1.93-.17.29-.18.65-.02.95.16.3.46.5.8.5H18c1.66 0 3-1.34 3-3 0-4.97-4.03-9-9-9zm-7 16h14v2H5v-2z"/>
                      </svg>
                    );
                  }
                  // Caves (fallback for Ellora/Ajanta caves)
                  if (t.includes('cave')) {
                    return (
                      <svg viewBox="0 0 24 24" class="h-5 w-5" aria-hidden="true">
                        <path fill="currentColor" d="M3 20l4-12 5-3 5 3 4 12H3zm11-2h3l-2-6-3-2-3 2-2 6h3l2-5 2 5z"/>
                      </svg>
                    );
                  }
                  // Default: location pin/compass
                  return (
                    <svg viewBox="0 0 24 24" class="h-5 w-5" aria-hidden="true">
                      <path fill="currentColor" d="M12 2a7 7 0 00-7 7c0 5.25 7 13 7 13s7-7.75 7-13a7 7 0 00-7-7zm0 9.5a2.5 2.5 0 110-5 2.5 2.5 0 010 5z"/>
                    </svg>
                  );
                })()}
              </div>
              <div>
                <h3 class="font-semibold text-slate-900">{h.title}</h3>
                <p class="text-sm text-slate-600 mt-1">{h.detail}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </section>

    <section class="mb-8">
      <StoryToggleIsland
        slug={entry.slug}
        visual={entry.gallery.map(g => ({ ...g, caption: g.alt }))}
        narrative={entry.narrative || entry.summary}
        narrativeHtml={entry.narrativeHtml}
        client:load
      />
    </section>

    <section id="itinerary" class="mb-8">
      <div class="mb-2 flex items-center justify-between">
        <h2 class="text-xl font-bold">Itinerary overview</h2>
        <div class="flex gap-2 text-sm">
          <button id="btn-itin-expand" class="btn-outline px-3 py-1 rounded">Expand all</button>
          <button id="btn-itin-collapse" class="btn-outline px-3 py-1 rounded">Collapse all</button>
        </div>
      </div>
      {entry.itinerary.map(d => <ItineraryDay {...d} />)}
      <script is:inline>
        (function(){
          const root = document.getElementById('itinerary');
          if (!root) return;
          const setAll = (open) => {
            root.querySelectorAll('details').forEach((el) => { el.open = !!open; });
          };
          const e = document.getElementById('btn-itin-expand');
          const c = document.getElementById('btn-itin-collapse');
          e && e.addEventListener('click', () => setAll(true));
          c && c.addEventListener('click', () => setAll(false));
        })();
      </script>
    </section>

        <section id="pricing" class="mb-8">
      <div class="mb-3 flex items-center justify-between">
        <h2 class="text-xl font-bold">Transparent pricing</h2>
        {pricing?.updated && (
          <span class="text-xs rounded-full bg-slate-100 text-slate-700 px-2 py-1">Updated {pricing.updated}</span>
        )}
      </div>
      {pricing ? (
        <>
          {pricing.assumptions.length > 0 && (
            <div class="mb-4">
              <p class="text-sm font-medium text-slate-900">Includes</p>
              <ul class="mt-2 flex flex-wrap gap-2">
                {pricing.assumptions.map((a) => (
                  <li class="inline-flex items-center text-xs bg-slate-100 text-slate-700 rounded-full px-2 py-1">{a}</li>
                ))}
              </ul>
            </div>
          )}

          <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {pricing.bands.map((b) => (
              <div class="card p-5 flex flex-col gap-3">
                <div class="flex items-center gap-2 text-sm">
                  <span class="inline-flex items-center gap-1 rounded-full bg-slate-100 px-2 py-1">{b.pax} pax</span>
                  <span class="inline-flex items-center gap-1 rounded-full bg-slate-100 px-2 py-1">{b.vehicle}</span>
                </div>
                <div class="text-2xl font-semibold text-slate-900">
                  {formatINR(b.from)} <span aria-hidden="true">–</span> {formatINR(b.to)}
                </div>
                <p class="text-xs text-slate-600">Estimated range. Final fare depends on exact plan.</p>
                <div class="mt-2">
                  <button class="btn-outline w-full" data-quote data-pax={b.pax} data-vehicle={b.vehicle}>Enquire</button>
                </div>
              </div>
            ))}
          </div>

          {pricing.disclaimers.length > 0 && (
            <details class="mt-4">
              <summary class="cursor-pointer text-sm text-slate-700">Notes & disclaimers</summary>
              <ul class="mt-2 list-disc list-inside text-xs text-slate-600">
                {pricing.disclaimers.map((d) => <li>{d}</li>)}
              </ul>
            </details>
          )}
        </>
      ) : (
        <p class="text-sm">Call for today's price</p>
      )}
    </section>
    <script is:inline>
      (function(){
        const pricing = document.getElementById('pricing');
        if (!pricing) return;
        pricing.querySelectorAll('button[data-quote]').forEach((btn) => {
          if (btn.__acQuoteBound) return;
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            try {
              const pax = btn.getAttribute('data-pax') || '';
              const vehicle = btn.getAttribute('data-vehicle') || '';
              const form = document.getElementById('lead-form');
              if (form) {
                const set = (name, val) => { const el = form.querySelector(`[name="${name}"]`); if (el && val) el.value = val; };
                // Prefill vehicle; pax field expects a number, so use lower bound if any
                set('vehicle', vehicle);
                const m = pax.match(/\d+/);
                if (m) set('pax', m[0]);
                // Append a contextual note
                const notes = form.querySelector('[name="notes"]');
                if (notes) {
                  const line = `Selected pricing band: ${pax} · ${vehicle}`;
                  notes.value = notes.value ? (notes.value + "\n" + line) : line;
                }
                form.scrollIntoView({ behavior: 'smooth', block: 'start' });
                const nameEl = form.querySelector('[name="name"]');
                if (nameEl) nameEl.focus();
              }
            } catch {}
          });
          btn.__acQuoteBound = true;
        });
      })();
    </script>

    {entry.faqs.length > 0 && (
      <section id="faqs" class="mb-8">
        <h2 class="text-xl font-bold mb-4">FAQs</h2>
        <FAQ items={entry.faqs} useHtml={true} />
      </section>
    )}

    <ReviewsSection
      brand="Axis Cabs"
      aggregate={{ average: reviews.length ? (reviews.reduce((s, r) => s + r.rating, 0) / reviews.length) : 0, count: reviews.length }}
      items={reviews}
    />

    <section id="lead" class="mb-8 text-center">
      <p class="mb-4 font-semibold">Ready to plan your trip?</p>
      <div class="flex justify-center gap-4">
        <a href={`tel:${entry.contact.phone}`} class="px-4 py-2 border rounded">Call</a>
        <a href={waHref} class="px-4 py-2 border rounded">WhatsApp</a>
      </div>
    </section>
  </main>
  <div class="max-w-6xl mx-auto px-4 my-8">
    <LeadForm />
  </div>
  <Footer />
</Base>

