---
/**
 * Axis Cabs — Lead form (MVP+ UX with GA4 + UTM capture)
 *
 * Features
 * - HTML5 required validation
 * - Honeypot input to reduce bot spam
 * - Supabase (anon) insert via singleton client (RLS expected on table)
 * - Busy/disabled state to avoid double clicks
 * - Clear success/error messages; form reset on success
 * - GA4 custom events: `lead_submit`, `whatsapp_click` (+ *_error)
 * - Attribution: captures UTM params + `page` (pathname) into Supabase
 *
 * UX/Validation Hardening
 * - Date: cannot select past; defaults to today
 * - Time: defaults to 07:00 if early, else “now + 2h” (rounded to 15m)
 * - WhatsApp number (user): digits only, exactly 10 (India)
 * - Passengers/Bags: digits only, min/max applied
 * - Name: alphabets & spaces only
 *
 * Required public env (Netlify site):
 * - PUBLIC_SUPABASE_URL
 * - PUBLIC_SUPABASE_ANON_KEY
 * - PUBLIC_WHATSAPP_NUMBER (e.g., +919922333305)
 * - PUBLIC_GA4_ID (provided by <Analytics /> in <head>)
 */
const WA_NUM = (import.meta.env.PUBLIC_WHATSAPP_NUMBER || '+919922333305').replace(/\D/g, '');
const SUPA_URL = import.meta.env.PUBLIC_SUPABASE_URL || '';
const SUPA_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || '';
const ENV_OK = Boolean(SUPA_URL && SUPA_KEY);
---

<form id="lead-form" class="card p-4 md:p-6" data-wa-num={WA_NUM} novalidate={false}>
  <!-- CHANGED: was `grid md:grid-cols-2` → now single-column until xl -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-4">
    <!-- Core fields -->
    <input required name="from_city"  placeholder="From City"               class="border rounded-xl px-4 py-3" />
    <input required name="to_city"    placeholder="To City"                 class="border rounded-xl px-4 py-3" />

    <!-- Date: defaults to today; min=today -->
    <input required name="date"  type="date"                                class="border rounded-xl px-4 py-3" />

    <!-- Time: defaults to 07:00 if early, else now+2h (rounded to 15m) -->
    <input required name="time"  type="time" step="900"                     class="border rounded-xl px-4 py-3" />

    <!-- Passengers: digits only, 1..12 -->
    <input required name="pax"   inputmode="numeric" type="text" minlength="1" maxlength="2"
           placeholder="Passengers" class="border rounded-xl px-4 py-3" />

    <!-- Bags: digits only, 0..12 (optional) -->
    <input           name="bags" inputmode="numeric" type="text" minlength="1" maxlength="2"
           placeholder="Bags"       class="border rounded-xl px-4 py-3" />

    <!-- Name: alphabets & spaces only -->
    <input required name="name"        placeholder="Your Name"              class="border rounded-xl px-4 py-3" />

    <!-- WhatsApp (user): India 10-digit, digits only -->
    <input required name="whatsapp"    placeholder="WhatsApp (10-digit)"    class="border rounded-xl px-4 py-3"
           inputmode="numeric" type="tel" maxlength="10" pattern="[0-9]{10}" autocomplete="tel" />

    <textarea name="notes" placeholder="Notes (optional)" class="xl:col-span-2 border rounded-xl px-4 py-3"></textarea>

    <!-- Honeypot (hidden to humans; bots often fill everything) -->
    <input name="website" tabindex="-1" autocomplete="off" class="hidden" />

    <!-- Hidden attribution fields (auto-filled from URL) -->
    <input type="hidden" name="utm_source" />
    <input type="hidden" name="utm_medium" />
    <input type="hidden" name="utm_campaign" />
    <input type="hidden" name="utm_term" />
    <input type="hidden" name="utm_content" />
  </div>

  <div class="mt-4 flex flex-col sm:flex-row gap-3">
    <!-- Important: type="button" so native submit doesn't fire -->
    <button type="button" class="btn-primary w-full sm:w-auto" id="btn-wa" aria-live="polite">
      Get Instant Quote on WhatsApp
    </button>
    <button type="button" class="inline-flex items-center px-5 py-3 rounded-xl border border-primary font-semibold w-full sm:w-auto" id="btn-submit" aria-live="polite">
      Submit
    </button>
  </div>

  <!-- Status area for messages -->
  <p id="msg" class="mt-3 text-sm" role="status" aria-live="polite">
    {!ENV_OK && '⚠️ Missing Supabase env vars. Add PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY on Netlify, then redeploy.'}
  </p>

  <!-- Hoisted script (unchanged logic) -->
  <script hoist>
    import { getSupabaseClient } from '@/lib/SupabaseClient';
    import { gaEvent } from '@/lib/ga';

    (function initAxisLeadForm() {
      const db = getSupabaseClient();

      const formEl    = document.getElementById('lead-form');
      if (!formEl) return;

      const btnWa     = formEl.querySelector('#btn-wa');
      const btnSubmit = formEl.querySelector('#btn-submit');
      const msg       = formEl.querySelector('#msg');

      const fields = {
        from: formEl.querySelector('[name="from_city"]'),
        to: formEl.querySelector('[name="to_city"]'),
        date: formEl.querySelector('[name="date"]'),
        time: formEl.querySelector('[name="time"]'),
        pax: formEl.querySelector('[name="pax"]'),
        bags: formEl.querySelector('[name="bags"]'),
        name: formEl.querySelector('[name="name"]'),
        wa: formEl.querySelector('[name="whatsapp"]'),
        notes: formEl.querySelector('[name="notes"]'),
      };

      const pagePath = () => location.pathname;
      const BUSINESS_WA = String(formEl.getAttribute('data-wa-num') || '').replace(/\D/g, '');

      function setMsg(text, isError = false) {
        msg.textContent = text || '';
        msg.classList.toggle('text-red-600', Boolean(isError));
        msg.classList.toggle('text-green-700', !isError);
      }

      function setBusy(on) {
        [btnWa, btnSubmit].forEach((el) => {
          el.disabled = on;
          el.classList.toggle('opacity-60', on);
          el.classList.toggle('cursor-not-allowed', on);
        });
      }

      function resetForm() {
        formEl.reset();
        applyDateDefaults();
        applyTimeDefaults();
      }

      function digitsOnly(s) { return String(s || '').replace(/\D/g, ''); }
      function clampInt(n, min, max) {
        const v = Number.parseInt(n, 10);
        if (Number.isNaN(v)) return null;
        return Math.min(Math.max(v, min), max);
      }

      function todayStr() {
        const now = new Date();
        const y = now.getFullYear();
        const m = String(now.getMonth() + 1).padStart(2, '0');
        const d = String(now.getDate()).padStart(2, '0');
        return `${y}-${m}-${d}`;
      }

      (function hydrateUtms() {
        const params = new URLSearchParams(location.search);
        ['utm_source','utm_medium','utm_campaign','utm_term','utm_content'].forEach((k) => {
          const el = formEl.querySelector(`[name="${k}"]`);
          const val = params.get(k);
          if (el && val) el.value = val;
        });
      })();

      // Defaults & Validation

      function applyDateDefaults() {
        const el = fields.date;
        if (!el) return;
        const t = todayStr();
        el.min = t;
        if (!el.value) el.value = t;
        const fix = () => { if (el.value && el.value < t) el.value = t; };
        el.addEventListener('change', fix);
        el.addEventListener('blur', fix);
      }

      function applyTimeDefaults() {
        const el = fields.time;
        if (!el || el.value) return;
        const now = new Date();
        let h = now.getHours();
        let m = now.getMinutes();
        if (h < 5) { h = 7; m = 0; }
        else {
          const rounded = Math.ceil(m / 15) * 15;
          if (rounded === 60) { h += 1; m = 0; } else { m = rounded; }
          h = Math.min(h + 2, 23);
        }
        el.value = `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
      }

      function wireNameValidation() {
        const el = fields.name;
        if (!el) return;
        const validate = () => {
          const cleaned = (el.value || '').replace(/[^A-Za-z\s]/g, '');
          if (cleaned !== el.value) el.value = cleaned;
          const ok = /^([A-Za-z]+(\s[A-Za-z]+)*)$/.test(el.value.trim());
          el.setCustomValidity(ok ? '' : 'Please use alphabets and spaces only.');
        };
        el.addEventListener('input', validate);
        el.addEventListener('blur', validate);
      }

      function wireWhatsAppValidation() {
        const el = fields.wa;
        if (!el) return;
        const handle = () => {
          const cleaned = digitsOnly(el.value).slice(0, 10).trim();
          if (cleaned !== el.value) el.value = cleaned;
          const ok = /^[0-9]{10}$/.test(el.value);
          el.setCustomValidity(ok ? '' : 'Enter a valid 10-digit WhatsApp number.');
        };
        el.addEventListener('input', handle);
        el.addEventListener('blur', handle);
      }

      function wirePaxValidation() {
        const el = fields.pax;
        if (!el) return;
        const handle = () => {
          const digits = digitsOnly(el.value);
          const clamped = digits ? clampInt(digits, 1, 12) : null;
          el.value = clamped === null ? '' : String(clamped);
          const n = Number.parseInt(el.value, 10);
          el.setCustomValidity(Number.isInteger(n) && n >= 1 && n <= 12 ? '' : 'Passengers must be between 1 and 12.');
        };
        el.addEventListener('input', handle);
        el.addEventListener('blur', handle);
      }

      function wireBagsValidation() {
        const el = fields.bags;
        if (!el) return;
        const handle = () => {
          const digits = digitsOnly(el.value);
          const clamped = digits === '' ? 0 : clampInt(digits, 0, 12);
          el.value = clamped === null ? '' : String(clamped);
          const n = Number.parseInt(el.value, 10);
          el.setCustomValidity(Number.isInteger(n) && n >= 0 && n <= 12 ? '' : 'Bags must be between 0 and 12.');
        };
        el.addEventListener('input', handle);
        el.addEventListener('blur', handle);
      }

      applyDateDefaults();
      applyTimeDefaults();
      wireNameValidation();
      wireWhatsAppValidation();
      wirePaxValidation();
      wireBagsValidation();

      // DB insert

      async function insertLeadOrThrow() {
        if (!formEl.reportValidity()) {
          throw new Error('Please fill all required fields (see highlights).');
        }

        const t = todayStr();
        if (fields.date && fields.date.value < t) {
          fields.date.value = t;
          throw new Error('Pickup date cannot be in the past.');
        }

        const fd = new FormData(formEl);
        const payload = Object.fromEntries(fd.entries());

        // Sanitize
        payload.name      = (payload.name || '').replace(/[^A-Za-z\s]/g, ' ').replace(/\s+/g, ' ').trim();
        payload.whatsapp  = digitsOnly(payload.whatsapp || '');
        payload.pax       = String(clampInt(digitsOnly(payload.pax || '1'), 1, 12) ?? '1');
        payload.bags      = String(clampInt(digitsOnly(payload.bags || '0'), 0, 12) ?? '0');

        if (payload.website) return payload;

        const req = ['from_city','to_city','date','time','pax','name','whatsapp'];
        for (const k of req) if (!payload[k]) throw new Error(`Missing ${k}`);

        if (!/^[0-9]{10}$/.test(payload.whatsapp)) {
          throw new Error('Enter a valid 10-digit WhatsApp number.');
        }

        const row = {
          source: 'web',
          page: pagePath(),
          from_city: payload.from_city,
          to_city:   payload.to_city,
          date:      payload.date,
          time:      payload.time,
          pax:       String(payload.pax),
          bags:      String(payload.bags || '0'),
          name:      payload.name,
          whatsapp:  payload.whatsapp,
          notes:     payload.notes || '',
          utm_source:   payload.utm_source   || '',
          utm_medium:   payload.utm_medium   || '',
          utm_campaign: payload.utm_campaign || '',
          utm_term:     payload.utm_term     || '',
          utm_content:  payload.utm_content  || ''
        };

        const { error } = await db.from('leads').insert(row);
        if (error) {
          console.error('[Lead insert failed]', error);
          throw new Error('We couldn’t save your details. Please try again or WhatsApp us.');
        }

        return payload;
      }

      // Events

      btnWa.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          const lead = await insertLeadOrThrow();

          gaEvent('whatsapp_click', {
            page: pagePath(),
            from_city: lead.from_city || '',
            to_city:   lead.to_city   || '',
          });

          const t =
            `Ride request:%0AFrom: ${encodeURIComponent(lead.from_city)}` +
            `%0ATo: ${encodeURIComponent(lead.to_city)}` +
            `%0ADate/Time: ${encodeURIComponent(lead.date)} ${encodeURIComponent(lead.time)}` +
            `%0APax/Bags: ${encodeURIComponent(lead.pax)}/${encodeURIComponent(lead.bags || '0')}` +
            `%0ANotes: ${encodeURIComponent(lead.notes || '')}`;

          resetForm();

          const wa = BUSINESS_WA;
          if (wa) {
            window.location.href = `https://wa.me/${wa}?text=${t}`;
          } else {
            setMsg('WhatsApp number not configured. Please call us or submit the form.', true);
          }
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('whatsapp_click_error', { page: pagePath() });
        } finally {
          setBusy(false);
        }
      });

      btnSubmit.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          await insertLeadOrThrow();
          gaEvent('lead_submit', { page: pagePath() });
          setMsg('Thanks! Our team will contact you shortly.');
          resetForm();
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('lead_submit_error', { page: pagePath() });
        } finally {
          setBusy(false);
        }
      });
    })();
  </script>
</form>
