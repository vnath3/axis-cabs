---
/* Compute once on the server, inject as a literal string for the client */
const WA_NUM = (import.meta.env.PUBLIC_WHATSAPP_NUMBER || '+919922333305').replace(/\D/g, '');
---

<form id="lead-form" class="card">
  <!-- ...your inputs stay the same... -->

  <div class="mt-4 flex gap-3">
    <button type="button" class="btn-primary" id="btn-wa">Get Instant Quote on WhatsApp</button>
    <button type="button" class="inline-flex items-center px-5 py-3 rounded-xl border border-primary font-semibold" id="btn-submit">Submit</button>
  </div>
  <p id="msg" class="mt-3 text-sm"></p>

  <script is:inline>
    const formEl = document.getElementById('lead-form');
    const btnWa = formEl.querySelector('#btn-wa');
    const btnSubmit = formEl.querySelector('#btn-submit');
    const msg = formEl.querySelector('#msg');

    // Injected as a plain string so no import.meta on the client
    const waNum = "{WA_NUM}";

    async function postLead() {
      const fd = new FormData(formEl);
      const payload = Object.fromEntries(fd.entries());
      const res = await fetch('/api/lead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      return res.json();
    }

    btnWa.addEventListener('click', async () => {
      msg.textContent = '';
      if (!formEl.reportValidity()) return;
      try {
        const data = await postLead();
        if (data?.ok) {
          const t =
            `Ride request:%0AFrom: ${encodeURIComponent(data.lead.from_city)}` +
            `%0ATo: ${encodeURIComponent(data.lead.to_city)}` +
            `%0ADate/Time: ${encodeURIComponent(data.lead.date)} ${encodeURIComponent(data.lead.time)}` +
            `%0APax/Bags: ${encodeURIComponent(data.lead.pax)}/${encodeURIComponent(data.lead.bags ?? '0')}` +
            `%0ANotes: ${encodeURIComponent(data.lead.notes ?? '')}`;
          window.location.href = `https://wa.me/${waNum}?text=${t}`;
        } else {
          msg.textContent = data?.error || 'Please check your inputs.';
        }
      } catch {
        msg.textContent = 'Network error. Try again.';
      }
    });

    btnSubmit.addEventListener('click', async () => {
      msg.textContent = '';
      if (!formEl.reportValidity()) return;
      try {
        const data = await postLead();
        msg.textContent = data?.ok ? 'Thanks! Our team will contact you shortly.' : (data?.error || 'Please check your inputs.');
      } catch {
        msg.textContent = 'Network error. Try again.';
      }
    });
  </script>
</form>
