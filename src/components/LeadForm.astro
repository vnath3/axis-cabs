---
/**
 * Axis Cabs — Lead form
 * - Custom validation (no browser popups)
 * - Posts to /api/leads-submit
 * - Preserves GA events + WhatsApp handoff
 * - Prefill from Fare Calculator ("booking:start" event + sessionStorage)
 */
const WA_NUM = (import.meta.env.PUBLIC_WHATSAPP_NUMBER || '+919922333305').replace(/\D/g, '');
---
<form id="lead-form" class="card p-4 md:p-6" data-wa-num={WA_NUM} data-lead-form novalidate>
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-4">
    <input required name="from_city"  placeholder="From City" class="border rounded-xl px-4 py-3" />
    <input required name="to_city"    placeholder="To City"   class="border rounded-xl px-4 py-3" />

    <input required name="date" type="date" class="border rounded-xl px-4 py-3" />
    <input required name="time" type="time" step="900" class="border rounded-xl px-4 py-3" />

    <select required name="vehicle" class="border rounded-xl px-4 py-3">
      <option value="sedan">Sedan</option>
      <option value="suv">SUV</option>
      <option value="luxury">Luxury</option>
      <option value="traveller">Traveller</option>
    </select>

    <input required name="pax"  inputmode="numeric" type="text" minlength="1" maxlength="2"
           placeholder="Passengers" class="border rounded-xl px-4 py-3" />
    <input name="bags" inputmode="numeric" type="text" minlength="1" maxlength="2"
           placeholder="Bags" class="border rounded-xl px-4 py-3" />

    <input required name="name" placeholder="Your Name" class="border rounded-xl px-4 py-3" />
    <input required name="whatsapp" placeholder="WhatsApp (10-digit)" class="border rounded-xl px-4 py-3"
           inputmode="numeric" type="tel" maxlength="10" pattern="[0-9]{10}" autocomplete="tel" />

    <textarea name="notes" placeholder="Notes (optional)" class="xl:col-span-2 border rounded-xl px-4 py-3"></textarea>

    <!-- Honeypot -->
    <input name="company" tabindex="-1" autocomplete="off" class="hidden" />

    <!-- Hidden attribution -->
    <input type="hidden" name="utm_source" />
    <input type="hidden" name="utm_medium" />
    <input type="hidden" name="utm_campaign" />
    <input type="hidden" name="utm_term" />
    <input type="hidden" name="utm_content" />
    <input type="hidden" name="gclid" />
    <input type="hidden" name="page_path" />
    <input type="hidden" name="referrer" />
  </div>

  <div class="mt-4 flex flex-col sm:flex-row gap-3">
    <button type="button" class="btn-primary w-full sm:w-auto" id="btn-wa">Get Instant Quote on WhatsApp</button>
    <button type="button" class="inline-flex items-center px-5 py-3 rounded-xl border border-primary font-semibold w-full sm:w-auto" id="btn-submit">Submit</button>
  </div>

  <p id="msg" class="mt-3 text-sm" role="status" aria-live="polite"></p>

  <script hoist>
    import { gaEvent } from '@/lib/ga';

    (function initLeadForm() {
      const form = document.getElementById('lead-form');
      if (!form) return;

      const btnWa = form.querySelector('#btn-wa');
      const btnSubmit = form.querySelector('#btn-submit');
      const msg = form.querySelector('#msg');

      // FIXED: no backslashes around backticks here
      const q = (name) => form.querySelector(`[name="${name}"]`);
      const fields = {
        from: q('from_city'),
        to: q('to_city'),
        date: q('date'),
        time: q('time'),
        vehicle: q('vehicle'),
        pax: q('pax'),
        bags: q('bags'),
        name: q('name'),
        wa: q('whatsapp'),
        notes: q('notes'),
      };

      const pagePath = () => location.pathname;
      const BUSINESS_WA = String(form.getAttribute('data-wa-num') || '').replace(/\D/g, '');

      const setMsg = (text, isError = false) => {
        msg.textContent = text || '';
        msg.classList.toggle('text-red-600', !!isError);
        msg.classList.toggle('text-green-700', !isError && !!text);
      };
      const setBusy = (on) => {
        [btnWa, btnSubmit].forEach((el) => {
          el.disabled = on; el.classList.toggle('opacity-60', on); el.classList.toggle('cursor-not-allowed', on);
        });
      };
      const digitsOnly = (s) => String(s || '').replace(/\D/g, '');
      const clampInt = (n, min, max) => {
        const v = Number.parseInt(n, 10); if (Number.isNaN(v)) return null;
        return Math.min(Math.max(v, min), max);
      };
      const todayStr = () => {
        const now = new Date(); const y = now.getFullYear();
        const m = String(now.getMonth() + 1).padStart(2, '0');
        const d = String(now.getDate()).padStart(2, '0'); return `${y}-${m}-${d}`;
      };

      // UTM hydration + page/referrer
      (function hydrateUtms() {
        const p = new URLSearchParams(location.search);
        const set = (k, v) => { const el = q(k); if (el) el.value = v || ''; };
        ['utm_source','utm_medium','utm_campaign','utm_term','utm_content','gclid'].forEach((k) => set(k, p.get(k)));
        set('page_path', location.pathname || '/');
        set('referrer', document.referrer || '');
      })();

      function applyDateDefaults() {
        const el = fields.date; if (!el) return;
        const t = todayStr(); el.min = t; if (!el.value) el.value = t;
        const fix = () => { if (el.value && el.value < t) el.value = t; };
        el.addEventListener('change', fix); el.addEventListener('blur', fix);
      }
      function applyTimeDefaults() {
        const el = fields.time; if (!el || el.value) return;
        const now = new Date(); let h = now.getHours(), m = now.getMinutes();
        if (h < 5) { h = 7; m = 0; } else { const r = Math.ceil(m/15)*15; if (r===60){h+=1;m=0;} else m=r; h=Math.min(h+2,23); }
        el.value = `${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}`;
      }
      function wireNameValidation() {
        const el = fields.name; if (!el) return;
        const handle = () => { const cleaned=(el.value||'').replace(/[^A-Za-z\s]/g,''); if (cleaned!==el.value) el.value=cleaned; };
        el.addEventListener('input', handle); el.addEventListener('blur', handle);
      }
      function wireWaValidation() {
        const el = fields.wa; if (!el) return;
        const handle = () => { const cleaned=digitsOnly(el.value).slice(0,10).trim(); if (cleaned!==el.value) el.value=cleaned; };
        el.addEventListener('input', handle); el.addEventListener('blur', handle);
      }
      function wirePaxValidation() {
        const el = fields.pax; if (!el) return;
        const handle = () => {
          const digits = digitsOnly(el.value); const clamped = digits ? clampInt(digits,1,12) : null;
          el.value = clamped===null ? '' : String(clamped);
        };
        el.addEventListener('input', handle); el.addEventListener('blur', handle);
      }
      function wireBagsValidation() {
        const el = fields.bags; if (!el) return;
        const handle = () => {
          const digits = digitsOnly(el.value); const clamped = digits==='' ? 0 : clampInt(digits,0,12);
          el.value = clamped===null ? '' : String(clamped);
        };
        el.addEventListener('input', handle); el.addEventListener('blur', handle);
      }

      applyDateDefaults(); applyTimeDefaults();
      wireNameValidation(); wireWaValidation(); wirePaxValidation(); wireBagsValidation();

      function validateFields() {
        const fd = new FormData(form);
        const get = (k) => String(fd.get(k) || '').trim();
        const req = ['from_city','to_city','date','time','vehicle','pax','name','whatsapp'];
        for (const k of req) if (!get(k)) return `Please fill “${k.replace('_',' ')}”.`;
        if (!/^[0-9]{10}$/.test(get('whatsapp'))) return 'Enter a valid 10-digit WhatsApp number.';
        const pax = parseInt(get('pax'), 10); if (!(pax >= 1 && pax <= 12)) return 'Passengers must be between 1 and 12.';
        const bags = get('bags') ? parseInt(get('bags'), 10) : 0; if (!(bags >= 0 && bags <= 12)) return 'Bags must be between 0 and 12.';
        return '';
      }

      async function postToApi() {
        const fd = new FormData(form);
        const body: Record<string, any> = Object.fromEntries(fd.entries());
        body.page_path = body.page_path || location.pathname || '/';
        body.referrer = body.referrer || document.referrer || '';
        const res = await fetch('/api/leads-submit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body),
        });
        const data = await res.json().catch(() => ({}));
        if (!res.ok || !data?.ok) throw new Error(data?.error || 'Could not save your request.');
        return data;
      }

      function resetForm() {
        form.reset(); applyDateDefaults(); applyTimeDefaults();
      }

      // =========================
      // Prefill from Fare Calculator
      // =========================
      function buildQuoteNote(q) {
        const trip = q?.roundtrip ? 'Round trip' : 'One-way';
        const range = (q?.estimate_low && q?.estimate_high)
          ? `₹ ${(q.estimate_low).toLocaleString('en-IN')} – ₹ ${(q.estimate_high).toLocaleString('en-IN')}`
          : '';
        const parts = [
          '[From Fare Calculator]',
          q?.from && q?.to ? `${q.from} → ${q.to}` : '',
          q?.vehicle ? `${q.vehicle}` : '',
          trip,
          q?.km ? `${q.km} km` : '',
          range
        ].filter(Boolean);
        return parts.join(' • ');
      }
      function prefillFromQuote(q) {
        if (!q) return;
        if (fields.from) fields.from.value = (q.from || '').toString();
        if (fields.to)   fields.to.value   = (q.to || '').toString();
        if (fields.vehicle && q.vehicle) fields.vehicle.value = (q.vehicle || '').toString();
        if (fields.notes) {
          const noteLine = buildQuoteNote(q);
          const current = (fields.notes.value || '').trim();
          fields.notes.value = current ? (current + '\\n' + noteLine) : noteLine;
        }
        form.scrollIntoView({ behavior: 'smooth', block: 'start' });
        if (fields.name) fields.name.focus();
      }

      // 1) Apply session prefill once (if any)
      try {
        const stash = sessionStorage.getItem('axis_booking_prefill');
        if (stash) {
          const q = JSON.parse(stash);
          prefillFromQuote(q);
          sessionStorage.removeItem('axis_booking_prefill');
        }
      } catch {}

      // 2) Live event from Fare Calculator
      window.addEventListener('booking:start', (e) => {
        try { prefillFromQuote(e.detail); } catch {}
      });

      // =========================
      // Existing CTA handlers
      // =========================
      btnWa.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          const err = validateFields(); if (err) throw new Error(err);
          await postToApi();
          gaEvent('whatsapp_click', { page: pagePath(), from_city: fields.from.value, to_city: fields.to.value });
          const t =
            `Ride request:%0AFrom: ${encodeURIComponent(fields.from.value)}` +
            `%0ATo: ${encodeURIComponent(fields.to.value)}` +
            `%0AVehicle: ${encodeURIComponent(fields.vehicle.value)}` +
            `%0ADate/Time: ${encodeURIComponent(fields.date.value)} ${encodeURIComponent(fields.time.value)}` +
            `%0APax/Bags: ${encodeURIComponent(fields.pax.value)}/${encodeURIComponent(fields.bags.value || '0')}` +
            `%0ANotes: ${encodeURIComponent(fields.notes.value || '')}`;
          resetForm();
          if (BUSINESS_WA) window.location.href = `https://wa.me/${BUSINESS_WA}?text=${t}`;
          else setMsg('WhatsApp number not configured.', true);
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('whatsapp_click_error', { page: pagePath() });
        } finally { setBusy(false); }
      });

      btnSubmit.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          const err = validateFields(); if (err) throw new Error(err);
          await postToApi();
          gaEvent('lead_submit', { page: pagePath() });
          setMsg('Thanks! Our team will contact you shortly.');
          resetForm();
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('lead_submit_error', { page: pagePath() });
        } finally { setBusy(false); }
      });
    })();
  </script>
</form>
