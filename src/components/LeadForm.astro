---
/**
 * Axis Cabs — Lead form (MVP+ UX)
 *
 * What this does:
 * - Browser-native validation first (required fields)
 * - Honeypot field to reduce basic bot spam
 * - Saves to Supabase (anon) using our singleton client
 * - Shows clear success/error messages
 * - Disables buttons while saving (prevents double submissions)
 * - Resets form after success (so it’s ready for the next lead)
 *
 * Dependencies:
 * - PUBLIC_WHATSAPP_NUMBER (browser-exposed env)
 * - Supabase client: '@/lib/SupabaseClient'
 *
 * Security assumptions (correct for this MVP):
 * - You expose ONLY the ANON key in PUBLIC_SUPABASE_ANON_KEY
 * - Row Level Security (RLS) is enabled on public.leads
 * - A policy allows anon INSERT to public.leads
 */
const WA_NUM = (import.meta.env.PUBLIC_WHATSAPP_NUMBER || '+919922333305').replace(/\D/g, '');
---

<form id="lead-form" class="card">
  <div class="grid md:grid-cols-2 gap-4">
    <!-- Core fields -->
    <input required name="from_city" placeholder="From City" class="border rounded-xl px-4 py-3" />
    <input required name="to_city" placeholder="To City" class="border rounded-xl px-4 py-3" />
    <input required name="date" type="date" class="border rounded-xl px-4 py-3" />
    <input required name="time" type="time" class="border rounded-xl px-4 py-3" />
    <input required name="pax" type="number" min="1" max="12" placeholder="Passengers" class="border rounded-xl px-4 py-3" />
    <input name="bags" type="number" min="0" max="12" placeholder="Bags" class="border rounded-xl px-4 py-3" />
    <input required name="name" placeholder="Your Name" class="border rounded-xl px-4 py-3" />
    <input required name="whatsapp" placeholder="WhatsApp (+91...)" class="border rounded-xl px-4 py-3" />
    <textarea name="notes" placeholder="Notes (optional)" class="md:col-span-2 border rounded-xl px-4 py-3"></textarea>

    <!-- HONEYPOT (hidden to humans; bots often fill every input) -->
    <input name="website" tabindex="-1" autocomplete="off" class="hidden" />
  </div>

  <div class="mt-4 flex gap-3">
    <!-- Important: type="button" so native form submit is never triggered -->
    <button type="button" class="btn-primary" id="btn-wa" aria-live="polite">Get Instant Quote on WhatsApp</button>
    <button type="button" class="inline-flex items-center px-5 py-3 rounded-xl border border-primary font-semibold" id="btn-submit" aria-live="polite">Submit</button>
  </div>

  <!-- Status area for messages -->
  <p id="msg" class="mt-3 text-sm" role="status" aria-live="polite"></p>

  <!-- Hoisted so Vite bundles imports and resolves the '@/...' alias -->
  <script hoist>
    import { getSupabaseClient } from '@/lib/SupabaseClient';

    (function initAxisLeadForm() {
      const db = getSupabaseClient();

      // Cache nodes
      const formEl    = document.getElementById('lead-form');
      if (!formEl) return; // defensive

      const btnWa     = formEl.querySelector('#btn-wa');
      const btnSubmit = formEl.querySelector('#btn-submit');
      const msg       = formEl.querySelector('#msg');

      // ---- Small helpers ----------------------------------------------------

      function setMsg(text, isError = false) {
        msg.textContent = text;
        msg.classList.toggle('text-red-600', isError);
        msg.classList.toggle('text-green-700', !isError);
      }

      function setBusy(on) {
        // disable both CTAs, add subtle visual feedback
        for (const el of [btnWa, btnSubmit]) {
          el.disabled = on;
          el.classList.toggle('opacity-60', on);
          el.classList.toggle('cursor-not-allowed', on);
        }
      }

      function resetForm() {
        // Reset visible inputs; keep UX simple
        formEl.reset();
      }

      // Return URLSearchParams helper (for UTM capture)
      function qs(key) {
        return new URLSearchParams(location.search).get(key) || '';
      }

      // ---- Core insert used by both buttons --------------------------------

      async function insertLeadOrThrow() {
        // Enforce browser-native "required"
        if (!formEl.reportValidity()) {
          throw new Error('Please fill all required fields.');
        }

        const fd = new FormData(formEl);
        const payload = Object.fromEntries(fd.entries());

        // HONEYPOT: if filled, treat as success but do nothing
        if (payload.website) return payload;

        // Minimal extra validation (nice safety net)
        const req = ['from_city','to_city','date','time','pax','name','whatsapp'];
        for (const k of req) if (!payload[k]) throw new Error(`Missing ${k}`);

        // Attach UTM values from URL (if present)
        payload.utm_source   = payload.utm_source   || qs('utm_source');
        payload.utm_campaign = payload.utm_campaign || qs('utm_campaign');

        const { error } = await db.from('leads').insert({
          source: 'web',
          from_city: payload.from_city,
          to_city: payload.to_city,
          date: payload.date,
          time: payload.time,
          pax: String(payload.pax),
          bags: String(payload.bags || '0'),
          name: payload.name,
          whatsapp: payload.whatsapp,
          notes: payload.notes || '',
          utm_source: payload.utm_source || '',
          utm_campaign: payload.utm_campaign || ''
        });

        if (error) {
          // Produce a friendly message. Do not leak internals to users, log to console for us.
          console.error('[Lead insert failed]', error);
          const hint = error?.message?.toLowerCase().includes('policy')
            ? ' (permission issue — RLS policy?)'
            : '';
          throw new Error('We couldn’t save your details. Please try again or WhatsApp us.' + hint);
        }

        return payload;
      }

      // ---- Event handlers ---------------------------------------------------

      btnWa.addEventListener('click', async () => {
        setMsg('');
        setBusy(true);
        try {
          const lead = await insertLeadOrThrow();

          // Build WhatsApp prefill text from lead data
          const t =
            `Ride request:%0AFrom: ${encodeURIComponent(lead.from_city)}` +
            `%0ATo: ${encodeURIComponent(lead.to_city)}` +
            `%0ADate/Time: ${encodeURIComponent(lead.date)} ${encodeURIComponent(lead.time)}` +
            `%0APax/Bags: ${encodeURIComponent(lead.pax)}/${encodeURIComponent(lead.bags || '0')}` +
            `%0ANotes: ${encodeURIComponent(lead.notes || '')}`;

          // Clear form so the page looks "fresh" after redirect back
          resetForm();

          // Open WhatsApp
          window.location.href = `https://wa.me/${'${WA_NUM}'}?text=${t}`;
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
        } finally {
          setBusy(false);
        }
      });

      btnSubmit.addEventListener('click', async () => {
        setMsg('');
        setBusy(true);
        try {
          await insertLeadOrThrow();
          setMsg('Thanks! Our team will contact you shortly.');
          resetForm();
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
        } finally {
          setBusy(false);
        }
      });
    })();
  </script>
</form>
