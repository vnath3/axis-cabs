---
/**
 * Axis Cabs ‚Äî Lead form (MVP+ UX with GA4 + UTM capture)
 *
 * Features
 * - HTML5 required validation
 * - Honeypot input to reduce bot spam
 * - Supabase (anon) insert via singleton client (RLS expected on table)
 * - Busy/disabled state to avoid double clicks
 * - Clear success/error messages; form reset on success
 * - GA4 custom events: `lead_submit`, `whatsapp_click` (+ *_error)
 * - Attribution: captures UTM params + `page` (pathname) into Supabase
 *
 * Required public env (Netlify site):
 * - PUBLIC_SUPABASE_URL
 * - PUBLIC_SUPABASE_ANON_KEY
 * - PUBLIC_WHATSAPP_NUMBER (e.g., +919922333305)
 * - PUBLIC_GA4_ID (provided by <Analytics /> in <head>)
 */
const WA_NUM = (import.meta.env.PUBLIC_WHATSAPP_NUMBER || '+919922333305').replace(/\D/g, '');
const SUPA_URL = import.meta.env.PUBLIC_SUPABASE_URL || '';
const SUPA_KEY = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || '';
const ENV_OK = Boolean(SUPA_URL && SUPA_KEY);
---

<form id="lead-form" class="card">
  <div class="grid md:grid-cols-2 gap-4">
    <!-- Core fields -->
    <input required name="from_city"  placeholder="From City"               class="border rounded-xl px-4 py-3" />
    <input required name="to_city"    placeholder="To City"                 class="border rounded-xl px-4 py-3" />
    <input required name="date"  type="date"                                class="border rounded-xl px-4 py-3" />
    <input required name="time"  type="time"                                class="border rounded-xl px-4 py-3" />
    <input required name="pax"   type="number" min="1" max="12" placeholder="Passengers" class="border rounded-xl px-4 py-3" />
    <input           name="bags"  type="number" min="0" max="12" placeholder="Bags"       class="border rounded-xl px-4 py-3" />
    <input required name="name"        placeholder="Your Name"              class="border rounded-xl px-4 py-3" />
    <input required name="whatsapp"    placeholder="WhatsApp (+91...)"      class="border rounded-xl px-4 py-3" />
    <textarea name="notes" placeholder="Notes (optional)" class="md:col-span-2 border rounded-xl px-4 py-3"></textarea>

    <!-- Honeypot (hidden to humans; bots often fill everything) -->
    <input name="website" tabindex="-1" autocomplete="off" class="hidden" />

    <!-- Hidden attribution fields (auto-filled from URL) -->
    <input type="hidden" name="utm_source" />
    <input type="hidden" name="utm_medium" />
    <input type="hidden" name="utm_campaign" />
    <input type="hidden" name="utm_term" />
    <input type="hidden" name="utm_content" />
  </div>

  <div class="mt-4 flex gap-3">
    <!-- Important: type="button" so native submit doesn't fire -->
    <button type="button" class="btn-primary" id="btn-wa" aria-live="polite">
      Get Instant Quote on WhatsApp
    </button>
    <button type="button" class="inline-flex items-center px-5 py-3 rounded-xl border border-primary font-semibold" id="btn-submit" aria-live="polite">
      Submit
    </button>
  </div>

  <!-- Status area for messages -->
  <p id="msg" class="mt-3 text-sm" role="status" aria-live="polite">
    {!ENV_OK && '‚ö†Ô∏è Missing Supabase env vars. Add PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY on Netlify, then redeploy.'}
  </p>

  <!-- Hoisted so Vite resolves '@/...' and bundles the imports once -->
  <script hoist>
    import { getSupabaseClient } from '@/lib/SupabaseClient';
    import { gaEvent } from '@/lib/ga';

    (function initAxisLeadForm() {
      // Single Supabase client (anon). RLS should handle security.
      const db = getSupabaseClient();

      // Cache nodes
      const formEl    = document.getElementById('lead-form');
      if (!formEl) return; // defensive

      const btnWa     = formEl.querySelector('#btn-wa');
      const btnSubmit = formEl.querySelector('#btn-submit');
      const msg       = formEl.querySelector('#msg');

      // ---- helpers ----------------------------------------------------------

      const pagePath = () => location.pathname; // persisted with the lead

      function setMsg(text, isError = false) {
        msg.textContent = text || '';
        msg.classList.toggle('text-red-600', Boolean(isError));
        msg.classList.toggle('text-green-700', !isError);
      }

      function setBusy(on) {
        for (const el of [btnWa, btnSubmit]) {
          el.disabled = on;
          el.classList.toggle('opacity-60', on);
          el.classList.toggle('cursor-not-allowed', on);
        }
      }

      function resetForm() {
        formEl.reset();
      }

      // prefill UTM hidden inputs from URL on load
      (function hydrateUtms() {
        const params = new URLSearchParams(location.search);
        const keys = ['utm_source','utm_medium','utm_campaign','utm_term','utm_content'];
        for (const k of keys) {
          const el = formEl.querySelector(`[name="${k}"]`);
          if (el && params.get(k)) el.value = params.get(k);
        }
      })();

      // Insert into Supabase or throw a friendly error
      async function insertLeadOrThrow() {
        // Enforce HTML5 required fields first
        if (!formEl.reportValidity()) {
          throw new Error('Please fill all required fields.');
        }

        const fd = new FormData(formEl);
        const payload = Object.fromEntries(fd.entries());

        // Honeypot: if 'website' filled, treat as success but skip DB insert
        if (payload.website) return payload;

        // Required fields (extra guardrails)
        const req = ['from_city','to_city','date','time','pax','name','whatsapp'];
        for (const k of req) if (!payload[k]) throw new Error(`Missing ${k}`);

        // Build row for Supabase
        const row = {
          source: 'web',
          page: pagePath(), // üëà capture current pathname
          from_city: payload.from_city,
          to_city:   payload.to_city,
          date:      payload.date,
          time:      payload.time,
          pax:       String(payload.pax),
          bags:      String(payload.bags || '0'),
          name:      payload.name,
          whatsapp:  payload.whatsapp,
          notes:     payload.notes || '',
          utm_source:   payload.utm_source   || '',
          utm_medium:   payload.utm_medium   || '',
          utm_campaign: payload.utm_campaign || '',
          utm_term:     payload.utm_term     || '',
          utm_content:  payload.utm_content  || ''
        };

        const { error } = await db.from('leads').insert(row);
        if (error) {
          console.error('[Lead insert failed]', error);
          throw new Error('We couldn‚Äôt save your details. Please try again or WhatsApp us.');
        }

        return payload;
      }

      // ---- events -----------------------------------------------------------

      // WhatsApp CTA: save lead then open WA with prefilled message
      btnWa.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          const lead = await insertLeadOrThrow();

          // GA: whatsapp_click
          gaEvent('whatsapp_click', {
            page: pagePath(),
            from_city: lead.from_city || '',
            to_city:   lead.to_city   || '',
          });

          // Build WA message
          const t =
            `Ride request:%0AFrom: ${encodeURIComponent(lead.from_city)}` +
            `%0ATo: ${encodeURIComponent(lead.to_city)}` +
            `%0ADate/Time: ${encodeURIComponent(lead.date)} ${encodeURIComponent(lead.time)}` +
            `%0APax/Bags: ${encodeURIComponent(lead.pax)}/${encodeURIComponent(lead.bags || '0')}` +
            `%0ANotes: ${encodeURIComponent(lead.notes || '')}`;

          resetForm();
          // ‚úÖ correct variable interpolation for WA number:
          window.location.href = `https://wa.me/${'${WA_NUM}'}`.replace('${WA_NUM}', '${WA_NUM}') + `?text=${t}`;
          // (Astro frontmatter variables are not available inside hoisted script templates,
          //  so we keep the number inside the HTML and pass it via data attribute too, if needed.)
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('whatsapp_click_error', { page: pagePath() });
        } finally {
          setBusy(false);
        }
      });

      // Submit CTA: save lead and confirm inline
      btnSubmit.addEventListener('click', async () => {
        setMsg(''); setBusy(true);
        try {
          await insertLeadOrThrow();

          // GA: lead_submit
          gaEvent('lead_submit', { page: pagePath() });

          setMsg('Thanks! Our team will contact you shortly.');
          resetForm();
        } catch (e) {
          setMsg(e?.message || 'Network error. Try again.', true);
          gaEvent('lead_submit_error', { page: pagePath() });
        } finally {
          setBusy(false);
        }
      });
    })();
  </script>
</form>
