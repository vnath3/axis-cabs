---
/**
 * FareCalculatorModal.astro
 * - Typeahead (1+ char) with Enter/Tab selection
 * - Vehicle as icon-radio buttons (Sedan/SUV/Luxury/Traveller)
 * - "Book Now" button (enabled after a successful estimate)
 * - ARIA live region for results
 * - GA events: fare_estimate_success / fare_estimate_error / fare_book_now
 */
const defaultFrom = '';
const defaultTo = '';
---

<style>
  .ac-modal { @apply fixed inset-0 z-50 flex items-end md:items-center justify-center; }
  .ac-backdrop { @apply absolute inset-0 bg-black/50; }
  .ac-sheet { @apply relative w-full md:max-w-3xl bg-white rounded-t-2xl md:rounded-2xl shadow-xl p-4 md:p-6; }
  .ac-label { @apply text-xs font-medium text-gray-600; }
  .ac-input { @apply w-full rounded-lg border border-gray-200 px-3 py-2 text-sm; }
  .ac-pill { @apply inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-medium; }
  .ac-ta-wrap { @apply relative; }
  .ac-ta-list { @apply absolute z-10 mt-1 max-h-56 w-full overflow-auto rounded-lg border border-gray-200 bg-white shadow-md; }
  .ac-ta-item { @apply px-3 py-2 text-sm cursor-pointer hover:bg-gray-50; }
  .ac-ta-empty { @apply px-3 py-2 text-xs text-gray-500; }

  /* Vehicle icon radio buttons */
  .vehicle-grid { @apply grid grid-cols-2 md:grid-cols-4 gap-3; }
  .vehicle-card { @apply relative; }
  .vehicle-card .inner {
    @apply flex flex-col items-center justify-center gap-1 rounded-xl border border-gray-200 bg-white px-4 py-3 text-sm;
  }
  .vehicle-card input { @apply sr-only; }
  .vehicle-card .inner svg { @apply h-6 w-10; }
  .vehicle-card .inner span { @apply font-medium; }
  .vehicle-card input:checked + .inner {
    border-color: var(--ac-brand);
    background-color: #fff7ed; /* orange-50 */
  }
</style>

<div id="farecalc-modal" class="hidden" aria-hidden="true">
  <div class="ac-modal">
    <div class="ac-backdrop" data-close></div>
    <div class="ac-sheet">
      <div class="flex items-start justify-between gap-4 mb-3">
        <h3 class="h3">Fare Calculator</h3>
        <button class="btn btn-ghost" data-close aria-label="Close">✕</button>
      </div>

      <form id="farecalc-form" class="space-y-4" autocomplete="off">
        <!-- Cities -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
          <div class="ac-ta-wrap">
            <label class="ac-label">From</label>
            <input name="from" id="fc-from" class="ac-input" value={defaultFrom} placeholder="Type a city…" aria-autocomplete="list" aria-controls="fc-from-list" aria-expanded="false" />
            <div id="fc-from-list" class="ac-ta-list hidden" role="listbox" aria-label="From city suggestions"></div>
          </div>
          <div class="ac-ta-wrap">
            <label class="ac-label">To</label>
            <input name="to" id="fc-to" class="ac-input" value={defaultTo} placeholder="Type a city…" aria-autocomplete="list" aria-controls="fc-to-list" aria-expanded="false" />
            <div id="fc-to-list" class="ac-ta-list hidden" role="listbox" aria-label="To city suggestions"></div>
          </div>
        </div>

        <!-- Vehicle icon radio group -->
        <div>
          <label class="ac-label">Vehicle</label>
          <div class="vehicle-grid" role="radiogroup" aria-label="Vehicle type">
            <!-- Sedan -->
            <label class="vehicle-card" aria-label="Sedan">
              <input type="radio" name="vehicle" value="sedan" checked />
              <div class="inner">
                <!-- Tabler: car -->
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                  <path d="M7 17m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" />
                  <path d="M17 17m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" />
                  <path d="M5 17h-2v-6l2 -5h9l4 5h1a2 2 0 0 1 2 2v4h-2m-4 0h-6m-6 -6h15m-6 0v-5" />
                </svg>
                <span>Sedan</span>
              </div>
            </label>

            <!-- SUV -->
            <label class="vehicle-card" aria-label="SUV">
              <input type="radio" name="vehicle" value="suv" />
              <div class="inner">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                  <path d="M3 13h18v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                  <path d="M3 13l2-5h8l4 3h4" />
                  <circle cx="7" cy="18" r="2" /><circle cx="17" cy="18" r="2" />
                </svg>
                <span>SUV</span>
              </div>
            </label>

            <!-- Luxury -->
            <label class="vehicle-card" aria-label="Luxury">
              <input type="radio" name="vehicle" value="luxury" />
              <div class="inner">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                  <path d="M2 13h20v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2z" />
                  <path d="M2 13l2-3h10l4 3" />
                  <path d="M8 12h3M12 12h3" />
                  <circle cx="7" cy="17" r="2" /><circle cx="17" cy="17" r="2" />
                </svg>
                <span>Luxury</span>
              </div>
            </label>

            <!-- Traveller -->
            <label class="vehicle-card" aria-label="Traveller">
              <input type="radio" name="vehicle" value="traveller" />
              <div class="inner">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                  <rect x="3" y="10" width="15" height="6" rx="2" />
                  <path d="M18 12h3a2 2 0 0 1 2 2v2h-5z" />
                  <path d="M5 12h4M9 12h4M13 12h4" />
                  <circle cx="7" cy="18" r="2" /><circle cx="17" cy="18" r="2" />
                </svg>
                <span>Traveller</span>
              </div>
            </label>
          </div>
        </div>

        <!-- Trip -->
        <div class="md:col-span-2 flex items-center gap-4">
          <label class="ac-label mr-2">Trip</label>
          <label class="inline-flex items-center gap-2 text-sm">
            <input type="radio" name="roundtrip" value="0" checked /> One-way
          </label>
          <label class="inline-flex items-center gap-2 text-sm">
            <input type="radio" name="roundtrip" value="1" /> Round trip
          </label>
        </div>

        <!-- Result -->
        <div id="farecalc-result" class="rounded-xl border border-gray-200 p-4" role="status" aria-live="polite">
          <div class="p">Enter cities and click “Get Estimate”.</div>
        </div>

        <!-- Actions -->
        <div class="flex items-center justify-between">
          <button type="button" class="btn btn-ghost" data-close>Close</button>
          <div class="flex gap-2">
            <button id="btn-estimate" type="submit" class="btn btn-outline">Get Estimate</button>
            <button id="btn-book" type="button" class="btn btn-primary disabled:opacity-50 disabled:cursor-not-allowed" disabled aria-disabled="true" title="Get an estimate to continue">Book Now</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<script hoist>
  import { gaEvent } from '@/lib/ga';

  const root = document.getElementById('farecalc-modal')!;
  const form = root.querySelector<HTMLFormElement>('#farecalc-form')!;
  const result = root.querySelector<HTMLDivElement>('#farecalc-result')!;
  const bookBtn = root.querySelector<HTMLButtonElement>('#btn-book')!;

  const show = () => { root.classList.remove('hidden'); root.setAttribute('aria-hidden','false'); };
  const hide = () => { root.classList.add('hidden'); root.setAttribute('aria-hidden','true'); };
  root.addEventListener('click', (e) => { if ((e.target as HTMLElement).dataset.close !== undefined) hide(); });
  root.querySelectorAll('[data-close]').forEach(el => el.addEventListener('click', hide));
  window.addEventListener('farecalc:open', show);

  const rs = (n:number) => '₹ ' + Number(n||0).toLocaleString('en-IN');

  // ---- Typeahead: Enter/Tab selects first; also supports click; abort stale requests ----
  type City = { city: string };

  function makeTA(input: HTMLInputElement, list: HTMLDivElement) {
    let timer: number | null = null;
    let ctr: AbortController | null = null;

    const closeList = () => { list.innerHTML=''; list.classList.add('hidden'); input.setAttribute('aria-expanded','false'); };
    const openList = () => { list.classList.remove('hidden'); input.setAttribute('aria-expanded','true'); };

    const render = (rows: City[]) => {
      if (!rows.length) {
        list.innerHTML = `<div class="ac-ta-empty">No matches</div>`;
        openList(); return;
      }
      list.innerHTML = rows.map((r) => `<div role="option" class="ac-ta-item" data-city="${r.city}">${r.city}</div>`).join('');
      openList();
    };

    const fetchCities = async (q: string) => {
      ctr?.abort(); ctr = new AbortController();
      const r = await fetch('/api/cities?q=' + encodeURIComponent(q), { cache: 'no-store', signal: ctr.signal });
      const j = await r.json().catch(() => ({ ok:false, items:[] }));
      return (j.ok && Array.isArray(j.items)) ? (j.items as City[]) : [];
    };

    input.addEventListener('input', () => {
      const q = input.value.trim();
      if (q.length < 1) { closeList(); return; }
      if (timer) window.clearTimeout(timer);
      timer = window.setTimeout(async () => {
        try {
          const items = await fetchCities(q);
          render(items);
        } catch { /* aborted */ }
      }, 150) as unknown as number;
    });

    // mouse select
    list.addEventListener('click', (e) => {
      const el = (e.target as HTMLElement).closest('[data-city]') as HTMLElement | null;
      if (!el) return;
      input.value = el.dataset.city || '';
      closeList();
      input.dispatchEvent(new Event('change'));
    });

    // Enter/Tab selects first visible option (if any)
    input.addEventListener('keydown', (e) => {
      if ((e.key === 'Enter' || e.key === 'Tab') && !list.classList.contains('hidden')) {
        const first = list.querySelector<HTMLElement>('[data-city]');
        if (first) {
          e.preventDefault();
          input.value = first.getAttribute('data-city') || '';
          closeList();
          input.dispatchEvent(new Event('change'));
          if (e.key === 'Tab') (document.activeElement as HTMLElement)?.blur();
        }
      }
    });

    document.addEventListener('click', (e) => {
      if (!list.contains(e.target as Node) && !input.contains(e.target as Node)) closeList();
    });
  }

  makeTA(root.querySelector<HTMLInputElement>('#fc-from')!, root.querySelector<HTMLDivElement>('#fc-from-list')!);
  makeTA(root.querySelector<HTMLInputElement>('#fc-to')!,   root.querySelector<HTMLDivElement>('#fc-to-list')!);

  // cache last quote payload for Book Now
  let lastQuote: any = null;

  // ---- Estimate ----
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const v = Object.fromEntries(new FormData(form) as any) as any;
    const params = new URLSearchParams({
      from: String(v.from || '').toLowerCase(),
      to: String(v.to || '').toLowerCase(),
      vehicle: String(v.vehicle || 'sedan').toLowerCase(),
      roundtrip: String(v.roundtrip || '0'),
    });
    if (!params.get('from') || !params.get('to')) {
      result.innerHTML = `<div class="text-sm text-red-600">Please choose both cities.</div>`;
      bookBtn.setAttribute('disabled','true'); bookBtn.setAttribute('aria-disabled','true');
      return;
    }

    result.innerHTML = '<div class="p">Calculating…</div>';
    bookBtn.setAttribute('disabled','true'); bookBtn.setAttribute('aria-disabled','true');

    try {
      const r = await fetch('/api/fare-quote?' + params.toString(), { cache: 'no-store' });
      const j = await r.json();
      if (!j.ok) throw new Error(j.error || 'failed');

      lastQuote = j;

      const fare = j.fare, dist = j.distance;

      result.innerHTML = `
        <div class="flex items-baseline gap-3">
          <div class="text-2xl md:text-3xl font-bold">${rs(fare.low)} – ${rs(fare.high)}</div>
          <span class="ac-pill border-gray-200 text-gray-600">All-inclusive</span>
        </div>
        <div class="mt-2 p">
          ${j.meta.from} → ${j.meta.to} • ${dist.km} km ${dist.highway_note ? ' • ' + dist.highway_note : ''}
        </div>
        <hr class="my-3" />
        <dl class="grid grid-cols-2 gap-y-1 text-sm">
          <dt class="text-gray-500">Base fare</dt><dd class="text-right">${rs(fare.breakdown.base)} <span class="text-xs text-gray-400">(${fare.breakdown.km_billable} km × ₹${fare.breakdown.per_km})</span></dd>
          <dt class="text-gray-500">Tolls &amp; DA</dt><dd class="text-right">₹ ${fare.breakdown.toll_low}–${fare.breakdown.toll_high} + ${rs(fare.breakdown.da)}</dd>
          ${fare.breakdown.night_fee ? `<dt class="text-gray-500">Night surcharge</dt><dd class="text-right">${rs(fare.breakdown.night_fee)}</dd>` : ''}
        </dl>
        <p class="mt-2 text-xs text-gray-500">Final fare may vary by traffic, vehicle, and timing. No hidden charges.</p>
      `;

      bookBtn.removeAttribute('disabled'); bookBtn.setAttribute('aria-disabled','false');
      bookBtn.title = 'Proceed to booking';

      gaEvent('fare_estimate_success', {
        from: j.meta.from, to: j.meta.to, vehicle: j.meta.vehicle,
        roundtrip: j.meta.roundtrip ? 1 : 0, km: dist.km,
        low: fare.low, high: fare.high
      });
    } catch (err: any) {
      result.innerHTML = `<div class="text-sm text-red-600">Couldn’t calculate. Try a different route or check later.</div>`;
      bookBtn.setAttribute('disabled','true'); bookBtn.setAttribute('aria-disabled','true');

      gaEvent('fare_estimate_error', {
        from: String((form as any).from?.value || ''),
        to: String((form as any).to?.value || ''),
        vehicle: String((form as any).vehicle?.value || 'sedan').toLowerCase(),
        message: String(err?.message || 'failed')
      });
    }
  });

  // ---- Book Now -> emit event, store prefill, navigate/scroll
  bookBtn.addEventListener('click', () => {
    if (!lastQuote) return;
    const payload = {
      from: lastQuote.meta.from,
      to: lastQuote.meta.to,
      vehicle: lastQuote.meta.vehicle,
      roundtrip: !!lastQuote.meta.roundtrip,
      km: lastQuote.distance.km,
      estimate_low: lastQuote.fare.low,
      estimate_high: lastQuote.fare.high
    };
    window.dispatchEvent(new CustomEvent('booking:start', { detail: payload }));
    try { sessionStorage.setItem('axis_booking_prefill', JSON.stringify(payload)); } catch {}
    const anchor = document.querySelector('#lead-form, [data-lead-form]');
    if (anchor) {
      (document.getElementById('farecalc-modal') as HTMLElement)?.classList.add('hidden');
      anchor.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
      const qs = new URLSearchParams({
        from: String(payload.from),
        to: String(payload.to),
        vehicle: String(payload.vehicle),
        roundtrip: payload.roundtrip ? '1' : '0',
        km: String(payload.km),
        low: String(payload.estimate_low),
        high: String(payload.estimate_high),
      });
      window.location.href = '/book?' + qs.toString();
    }

    gaEvent('fare_book_now', {
      from: payload.from, to: payload.to, vehicle: payload.vehicle,
      roundtrip: payload.roundtrip ? 1 : 0, km: payload.km,
      low: payload.estimate_low, high: payload.estimate_high
    });
  });
</script>
