---
/**
 * Robust GA4 loader (client-safe)
 * - Loads gtag.js
 * - Defines window.gtag and sends config
 * - Flushes queued events from ga.ts
 *
 * Add <Analytics /> inside <head> on every page.
 */
const HAS_ID = Boolean(import.meta.env.PUBLIC_GA4_ID); // only render tag when ID exists
---
{HAS_ID && (
  <>
    <!-- GA4 base library -->
    <script async src={`https://www.googletagmanager.com/gtag/js?id=${import.meta.env.PUBLIC_GA4_ID}`}></script>

    <!-- Hoisted module: define gtag, config with PUBLIC_GA4_ID, flush queue -->
    <script hoist>
      import { flushGaQueue } from '@/lib/ga';

      // Read public env on the client
      const GA_ID  = import.meta.env.PUBLIC_GA4_ID || '';
      const DEBUG  = new URLSearchParams(location.search).get('debug') === '1';

      // Define dataLayer/gtag BEFORE GA library executes
      window.dataLayer = window.dataLayer || [];
      function gtag(){ window.dataLayer.push(arguments); }
      window.gtag = gtag;

      // Init + config
      gtag('js', new Date());
      gtag('config', GA_ID, { send_page_view: true, debug_mode: DEBUG });

      // Flush queued custom events (from ga.ts)
      const tryFlush = () => { try { flushGaQueue(); } catch {} };
      window.addEventListener('load', tryFlush);
      setTimeout(tryFlush, 400);
      setTimeout(tryFlush, 1200);

      console.log('[GA] configured', { GA_ID, DEBUG });
    </script>
  </>
)}
