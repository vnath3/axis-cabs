---
/**
 * ReviewsSection.astro — Single-row, continuously moving reviews marquee
 * Implementation: requestAnimationFrame loop (px/second), seamless loop via row duplication.
 * - Pauses on hover/touch
 * - Fetches all pages from /api/reviews-list and concatenates
 * - Injects AggregateRating JSON-LD (server-rendered baseline + client updates)
 */

import type { ReviewsAggregate } from "@/data/reviews-aggregate";

interface Props {
  brand?: string;
  fnBase?: string;
  speed?: number;               // px/sec
  aggregate?: ReviewsAggregate; // { average: number; count: number }
}

const BRAND_NAME_DEFAULT = "Axis Cabs";
const FN_BASE_DEFAULT = "/api";
const SPEED_PX_PER_SEC_DEFAULT = 60;

const {
  brand = BRAND_NAME_DEFAULT,
  fnBase = FN_BASE_DEFAULT,
  speed = SPEED_PX_PER_SEC_DEFAULT,
  aggregate
} = Astro.props;

// Absolute site (for @id linking and canonical URLs)
const site = (Astro.site?.toString() || "https://axiscabs.com").replace(/\/$/, "");
const orgId = `${site}/#org`;

// Server-rendered JSON-LD baseline (so Google can see ratings without JS)
const reviewsJsonLd = aggregate
  ? JSON.stringify({
      "@context": "https://schema.org",
      "@type": "TaxiService",     // more specific than LocalBusiness
      "@id": orgId,
      "name": brand,
      "url": site,
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": Number(aggregate.average.toFixed(1)),
        "reviewCount": aggregate.count
      }
    })
  : "";
---

<section
  id="reviews"
  class="py-12 sm:py-16 bg-slate-50"
  data-fn-base={fnBase}
  data-brand={brand}
  data-speed={String(speed)}
  data-org-id={orgId}
  data-site={site}
>
  <div class="mx-auto max-w-6xl px-4">
    <h2 class="text-2xl sm:text-3xl font-bold text-slate-900">What customers say</h2>
    <p class="mt-1 text-slate-600">We only display verified, approved reviews.</p>

    <!-- Marquee wrapper -->
    <div id="ac-marquee-wrap" class="relative mt-6 overflow-hidden">
      <!-- fading edges -->
      <div class="pointer-events-none absolute inset-y-0 left-0 w-16 bg-gradient-to-r from-slate-50 to-transparent"></div>
      <div class="pointer-events-none absolute inset-y-0 right-0 w-16 bg-gradient-to-l from-slate-50 to-transparent"></div>

      <!-- Runner will be translated by JS -->
      <div id="ac-marquee-runner" class="flex gap-4 will-change-transform"></div>
    </div>

    <!-- Server-rendered JSON-LD (baseline); client JS will update this node if fresher data is fetched -->
    <script id="ac-reviews-jsonld" type="application/ld+json" is:inline set:html={reviewsJsonLd} />
  </div>
</section>

<style is:global>
  .ac-review-card {
    width: 20rem; min-width: 20rem; /* readable card width */
    border-radius: 1rem;             /* rounded-2xl */
    background: #fff;
    padding: 1.5rem;                 /* p-6 */
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    outline: 1px solid rgb(0 0 0 / 0.05); /* ring-1 ring-black/5 */
  }
  @media (min-width: 640px) { .ac-review-card { width: 22rem; min-width: 22rem; } }
  @media (min-width: 1024px){ .ac-review-card { width: 24rem; min-width: 24rem; } }
  .ac-review-card * { word-break: break-word; }
</style>

<script is:inline type="module">
(() => {
  const root   = document.getElementById('reviews');
  if (!root) return;

  const FN_BASE = root.getAttribute('data-fn-base') || '/api';
  const brand   = root.getAttribute('data-brand')    || 'Axis Cabs';
  const SPEED   = Number(root.getAttribute('data-speed')) || 60; // px/sec
  const orgId   = root.getAttribute('data-org-id') || '';
  const site    = root.getAttribute('data-site')    || (location.origin || '');

  const wrap   = document.getElementById('ac-marquee-wrap');
  const runner = document.getElementById('ac-marquee-runner');
  const jsonLdEl = document.getElementById('ac-reviews-jsonld');

  let aggregate = { count: 0, average: 0 };

  // --- utils ---
  const stripQuotes = (s) => typeof s === 'string' ? s.replace(/^"|"$/g, '') : s;
  const escapeHtml = (s='') =>
    s.replace(/[&<>"']/g, (ch) => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[ch]));

  const fmtDate = (iso) => {
    try {
      const d = new Date(iso);
      return d.toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: '2-digit' });
    } catch { return ''; }
  };

  const star = (filled) =>
    `<svg viewBox="0 0 20 20" class="inline h-4 w-4 ${filled ? 'fill-amber-400' : 'fill-slate-200'}" aria-hidden="true">
      <path d="M10 15.27 16.18 19l-1.64-7.03L20 7.24l-7.19-.61L10 0 7.19 6.63 0 7.24l5.46 4.73L3.82 19z"/>
     </svg>`;

  const stars = (n) => {
    const score = Math.max(1, Math.min(5, Number(n) || 5));
    return `<div class="mb-2" aria-label="${score} out of 5 stars">
      ${[...Array(5)].map((_, i) => star(i < score)).join('')}
    </div>`;
  };

  const cardHTML = (r) => {
    const rating = Number(r.rating) || 5;
    const meta   = [r.name || 'Customer', r.city || ''].filter(Boolean).join(' • ');
    const date   = fmtDate(r.created_at);
    const body   = escapeHtml(stripQuotes(r.comment ?? r.review_text ?? ''));

    return `
      <article class="ac-review-card">
        ${stars(rating)}
        <blockquote class="text-slate-800 leading-relaxed">${body}</blockquote>
        <div class="mt-4 flex items-center justify-between text-sm text-slate-600">
          <span>${escapeHtml(meta)}</span>
          <time datetime="${r.created_at || ''}">${date}</time>
        </div>
      </article>
    `;
  };

  // Overwrite JSON-LD with fresh data (keeps server baseline if fetch fails)
  const updateJsonLd = () => {
    const obj = {
      "@context": "https://schema.org",
      "@type": "TaxiService",
      "name": brand,
      "url": site,
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": aggregate.average || 0,
        "reviewCount": aggregate.count || 0
      }
    };
    if (orgId) obj["@id"] = orgId;
    jsonLdEl.textContent = JSON.stringify(obj);
  };

  async function safeJson(res) {
    const text = await res.text();
    try { return JSON.parse(text); } catch { return { ok:false, error: text.slice(0,180) }; }
  }

  async function fetchAllReviews() {
    const pageSize = 24;
    let page = 1, all = [], more = true;
    try {
      while (more && page <= 20) {
        const url = new URL(`${FN_BASE}/reviews-list`, location.origin);
        url.searchParams.set('page', String(page));
        url.searchParams.set('pageSize', String(pageSize));
        const res  = await fetch(url.toString(), { headers: { accept: 'application/json' } });
        const data = await safeJson(res);
        if (!res.ok || !data?.ok) break;
        aggregate = data.aggregate || aggregate;
        all  = all.concat(Array.isArray(data.items) ? data.items : []);
        more = !!data.hasMore;
        page += 1;
      }
      return all;
    } catch (err) {
      console.error(err);
      runner.innerHTML = '<p class="text-sm text-slate-500">Unable to load reviews right now.</p>';
      return null;
    }
  }

  // --- RAF marquee ---
  let offset = 0;          // current translateX in px (negative values)
  let lastTs = 0;
  let copyWidth = 0;       // width of the first copy in px
  let paused = false;
  let rafId;

  const step = (ts) => {
    if (!lastTs) lastTs = ts;
    const dt = (ts - lastTs) / 1000;         // seconds since last frame
    lastTs = ts;

    if (!paused) {
      offset -= SPEED * dt;                  // move left
      if (-offset >= copyWidth) offset += copyWidth; // seamless wrap
      runner.style.transform = `translate3d(${offset}px,0,0)`;
    }

    rafId = requestAnimationFrame(step);
  };

  const setPause = (v) => { paused = v; };
  const attachPauseHandlers = () => {
    wrap.addEventListener('mouseenter', () => setPause(true));
    wrap.addEventListener('mouseleave', () => setPause(false));
    wrap.addEventListener('touchstart', () => setPause(true), { passive: true });
    wrap.addEventListener('touchend',   () => setPause(false), { passive: true });
  };

  (async () => {
    const items = await fetchAllReviews();

    if (!items || !items.length) {
      if (!runner.innerHTML) {
        runner.innerHTML = '<p class="text-sm text-slate-500">No reviews yet. Be the first to share your experience!</p>';
      }
      // Still update JSON-LD so at least baseline renders
      updateJsonLd();
      return;
    }

    // Build one row
    const one = document.createElement('div');
    one.className = 'flex gap-4';
    one.innerHTML = items.map(cardHTML).join('');

    // Clone for seamless loop
    const two = document.createElement('div');
    two.className = 'flex gap-4';
    two.innerHTML = one.innerHTML;

    runner.innerHTML = '';
    runner.appendChild(one);
    runner.appendChild(two);

    // Measure the width of one copy after it paints
    requestAnimationFrame(() => {
      copyWidth = one.getBoundingClientRect().width;
      updateJsonLd(); // client-side numbers overwrite server baseline
      // Start the loop
      cancelAnimationFrame(rafId);
      lastTs = 0;
      rafId = requestAnimationFrame(step);
    });

    // Re-compute on resize
    let resizeRaf;
    window.addEventListener('resize', () => {
      cancelAnimationFrame(resizeRaf);
      resizeRaf = requestAnimationFrame(() => {
        copyWidth = one.getBoundingClientRect().width;
      });
    }, { passive: true });

    attachPauseHandlers();
  })();
})();
</script>
